#!/usr/bin/env bash

# Print only the library target portion of a .cabal file and filter
# out linen comments.
isolateLibraryTarget() {
  sed -n '/^[Ll]ibrary/,/^[^[:space:]]/ { /^[[Ll]ibrary/p; /^[[:space:]]/p; }' \
  | sed 's/--.*$//'
}

# Remove any Cabal block guarded by an "if os(windows)" or "if
# os(solaris)" or "if os(ios)" conditional. This is a very fragile
# test!
removeWindowsBlocks() {
  local AWK
  read -r -d '' AWK<<'EOF'
BEGIN { windowsIndent = 0; }
{
  if(match($0, /if os\(windows\)/)) {
    windowsIndent = RSTART;
  } else if(match($0, /if os\(solaris\)/)) {
    windowsIndent = RSTART;
  } else if(match($0, /if os\(ios\)/)) {
    windowsIndent = RSTART;
  } else if(windowsIndent > 0) {
    match($0, /^[[:space:]]*/);
    if(RLENGTH <= windowsIndent) {
      windowsIndent = 0;
      print($0);
    }
  } else {
    print($0);
  }
}
EOF
  awk "$AWK"
}

# Print the library target of any .cabal file in the current directory
# while removing any blocks guarded by a windows or solaris check.
cabalLibraryTarget() {
  cat ./*.cabal | sed 's/--.*$//' | isolateLibraryTarget | removeWindowsBlocks
}

# Print each build-tool without any version constraint.
cabalBuildTools() {
  cabalLibraryTarget \
  | grep -i "build-tools" | awk 'BEGIN { FS=":"; } { print($2); }' | sed 's/,/\
/' | sed -e 's/^[[:space:]]*//' -e 's/ .*$//'
}

allBuildToolsAux() {
  cabalBuildTools
  if [ -d .cabbages ]; then
    local DEPS=($(getDependencies cabal.config))
    local d
    (cd .cabbages && \
     for d in "${DEPS[@]}"; do
       (cd "$d" &&  cabalBuildTools)
     done)
  fi
}

# Print the array of all build-tools used to build this package and
# all its dependencies.
allBuildTools() {
  local TOOLS=($(allBuildToolsAux | uniq))

  # hsc2hs comes with GHC
  local special
  for special in hsc2hs; do
    local i=$(findIndex "$special" TOOLS[@])
    if [ "$i" -gt -1 ]; then
      unset TOOLS[$i]
    fi
  done
  echo "${TOOLS[@]}"
}

# Print the array of all buildable build-tools (ie not happy, alex, or
# hsc2hs) used to build this package and all of its dependencies.
allBuildableBuildTools() {
  local TOOLS=($(allBuildToolsAux | uniq))

  # We don't build alex, happy, or hsc2hs
  local special
  for special in alex happy hsc2hs; do
    local i=$(findIndex "$special" TOOLS[@])
    if [ "$i" -gt -1 ]; then
      unset TOOLS[$i]
    fi
  done
  echo "${TOOLS[@]}"
}

cabalFrameworks() {
  cabalLibraryTarget \
  | grep -i "frameworks" | awk 'BEGIN { FS=":"; } { print($2); }' | sed 's/,/\
/' | uniq
}

unconstrainCabal() {
  local UNCONSTRAIN
  read -r -d '' UNCONSTRAIN<<'EOF'
BEGIN { 
  buildDep = 0;
  FS = ",";
}
{
  lineSkip = 0;
  if(match($0, /^[[:space:]]*[Bb][Uu][Ii][Ll][Dd]-[Dd][Ee][Pp][Ee][Nn][Dd][Ss]:/)) {
    buildDep = 1;
    match($0, /^[[:space:]]*/);
    indentation = RLENGTH;
    for(i = 0; i < RLENGTH; ++i) printf(" ");
    printf("build-depends:");
    sub(/^[[:space:]]*[Bb][Uu][Ii][Ll][Dd]-[Dd][Ee][Pp][Ee][Nn][Dd][Ss]:/,"",$0);
    match($0, /^[[:space:]]*/);
    for(i = 0; i < RLENGTH; ++i) printf(" ");
    sub(/^[[:space:]]*/,"",$0);
  } else if(buildDep) {
    if(match($0,/^[[:space:]]*$/)) {
      lineSkip = 1;
    } else {
      match($0, /^[[:space:]]*/);
      if(RLENGTH <= indentation) {
        buildDep = 0;
      } else {
        for(i = 0; i < RLENGTH; ++i) printf(" ");
        sub(/^[[:space:]]*/,"",$0);
      }
    }
  }
  if(buildDep && !lineSkip) {
    # Update a line of a build-depend
    for(i = 1; i <= NF; ++i) {
      sub(/^[[:space:]]*/,"",$(i));
      sub(/[[:space:]]*$/,"",$(i));
      if(match($(i), "[ ><=]")) {
        pkgName = substr($(i), 1, RSTART - 1);
        printf("%s", pkgName);
      } else {
        printf("%s", $(i));
      }
      if(i < NF) printf(", ");
    }
    printf("\n");
  } else {
    # Everything else gets printed
    print $0
  }
}
EOF
  awk "$UNCONSTRAIN"
}

# Try freezing after removing all version constraints.
freezeUnconstrained() {
 local NUMCABALS=$(find . -maxdepth 1 -name '?*.cabal' | wc -l)
  if [ "$NUMCABALS" -gt 1 ]; then
    echo "Error: Found multiple cabal files in $(pwd)"
    exit 1
  fi
  local REALCABAL=$(basename "$(ls ./*.cabal)")
  (cat "$REALCABAL" | sed 's/--.*$//' | unconstrainCabal) > cabbageDummy.cabal
  mv "$REALCABAL" cabbageBackup.bak
  mv cabbageDummy.cabal "$REALCABAL"
  freezeCabbagePatch 1
  local OK=$?
  return $OK
}

# List directories of added sources
getAddedSources() {
  sed '1,/^$/ d' | sed '/^$/,$ d'
}

# Takes two sets of constraints separates by a line containing only
# "***" and returns the second set of package names with versions
# drawn from the first set.
awkConstraintIntersection() {
  read -r -d '' intersect<<'EOF'
BEGIN {
  downConfig = 1;
  numUpstream = 0;
}
{
  if($1 == "***") {
    downConfig = 0;
  } else if(downConfig) {
    downstream[$1] = $2;
  } else {
    if($1 in downstream) {
      numUpstream++;
      upstream[$1] = downstream[$1];
    }
  }
}
END {
  cnt = 0;
  for (p in upstream) {
    if(cnt==0) {
      printf("constraints: ");
    } else {
      printf("             ");
    }
    printf("%s ==%s", p, upstream[p]);
    cnt++;
    if(cnt != numUpstream) { printf(",\n"); }
  }
}
EOF
  awk "$intersect"
}

# Takes a configuration file and extracts the "constraints" section.
isolateConstraints() {
  sed -n '/^[Cc]onstraints/,/^[^[:space:]]/ { /^[Cc]onstraints/p; /^[[:space:]]/p; }'
}

isolateAndCleanupConstraints() {
  isolateConstraints | sed -e 's/^[Cc]onstraints: //' -e 's/^[[:space:]]*//' \
  | sed 's/\([-_[:alpha:]]*\) ==\([[:digit:].]*\),*$/\1 \2/'
}
 
# Takes two constraint files, downstream and upstream
updateConstraintsAwk() {
  { (isolateAndCleanupConstraints < "$1"); \
    echo "***"; \
    (isolateAndCleanupConstraints < "$2"); } \
  | awkConstraintIntersection
}

pinBuildDepends() {
  local PIN
  read -r -d '' PIN<<'EOF'
BEGIN { 
  downConfig = 1;
  buildDep = 0;
}
/[[:space:]]*[Bb][Uu][Ii][Ll][Dd]-[Dd][Ee][Pp][Ee][Nn][Dd][Ss]:/ {
  match($0, /^[[:space:]]*/);
  indentation = RLENGTH;
  for(i = 0; i < RLENGTH; ++i) printf(" ");
  printf("build-depends:");

  buildDep = 2;
  gsub(/^[[:space:]]*[Bb][Uu][Ii][Ll][Dd]-[Dd][Ee][Pp][Ee][Nn][Dd][Ss]:/,"",$0);
}
{
  if(downConfig && $1 == "***") {
    downConfig = 0;
    FS=",";
  } else if(downConfig) {
    downstream[$1] = $2;
  } else if(buildDep) {
    match($0, /^[[:space:]]*/);
    if(buildDep == 2 || RLENGTH > indentation) {
      buildDep = 1;
      # Update a line of a build-depend
      for(i = 1; i <= NF; ++i) {
        if(i == NF && match($(i), "^[[:space:]]*$")) {
        } else {
          if(i == 1) {
            # Add leading spaces
            match($(i), "^[[:space:]]*");
            for(j = 0; j < RLENGTH; ++j) {
              printf(" ");
            }
          }
          gsub(/^[[:space:]]*/,"",$(i));
          gsub(/[[:space:]]*$/,"",$(i));
          if(match($(i), "[ ><=]")) {
            pkgName = substr($(i), 1, RSTART - 1);
            if(pkgName in downstream) {
              printf("%s ==%s", pkgName, downstream[pkgName]);
            } else {
              printf("%s", $(i));
            }
          } else {
            if($(i) in downstream) {
              printf("%s ==%s", $(i), downstream[$(i)]);
            } else {
              printf("%s", $(i));
            }
          }
        }
        if(i < NF) printf(", ");
      }
      printf("\n");
    } else {
      # We've left a build-depends stanza
      buildDep = 0;
      print $0
    }
  } else {
    # Everything else gets printed
    print $0
  }
}
EOF
  awk "$PIN"
}

# Given a build-depends stanza, remove the "build-depends:" string,
# commas between dependencies, and line comments. Then, remove leading
# spaces and reformat each dependency as "package, versions".
buildDependsReformat() {
  sed -e 's/^[[:space:]]*[Bb][Uu][Ii][Ll][Dd]-[Dd][Ee][Pp][Ee][Nn][Dd][Ss]:[[:space:]]*//' -e 's/,/\
  /g' -e 's/--.*$//' | sed -e 's/^[[:space:]]*//' -e 's/ /, /' \
  -e 's/\([[:alpha:]]\)\([<>=]\)/\1, \2/'
}

# Takes a configuration file and extracts the "constraints" section.
isolateConstraints() {
  sed -n '/^[Cc]onstraints/,/^[^[:space:]]/ { /^[Cc]onstraints/p; /^[[:space:]]/p; }'
}

isolateAndCleanupConstraints() {
  isolateConstraints | sed -e 's/^[Cc]onstraints: //' -e 's/^[[:space:]]*//' \
  | sed 's/\([-_[:alpha:]]*\) ==\([[:digit:].]*\),*$/\1 \2/'
}

# The start of a Cabal library specification, ready for a
# build-depends stanza.
dummyCabalLibrary() {
  echo "name:               Dummy"
  echo "version:            0.1.0.0"
  echo "build-type:         Simple"
  echo "cabal-version:      >=1.10"
  echo ""
  echo "library"
  echo "  exposed-modules:"
}

# Takes a constraints file and works with the .cabal file in the
# current directory.
freezeWithConstraints() {
  local NUMCABALS=$(find . -maxdepth 1 -name '?*.cabal' | wc -l)
  if [ "$NUMCABALS" -gt 1 ]; then
    echo "Error: Found multiple cabal files in $(pwd)"
    exit 1
  fi
  local REALCABAL=$(basename "$(ls ./*.cabal)")
  ({ (isolateAndCleanupConstraints < "$1"); echo "***"; cat "$REALCABAL"; } \
   | pinBuildDepends) > cabbageDummy.cabal

  # Remove cabbage-patch version suffixes so cabal freeze can work
  sed 's/\( ==[[:digit:].]*\).4552/\1/' cabbageDummy.cabal > cabbageDummy2.cabal
  rm cabbageDummy.cabal
  mv "$REALCABAL" cabbageBackup.bak
  freezeCabbagePatch
  local OK=$?
  mv cabbageBackup.bak "$REALCABAL"
  rm cabbageDummy2.cabal
  return $OK
}

# Prints the extra-libraires from a cabal file iff they occur in a
# library target.
cabalExtraLibraries() {
  cat ./*.cabal | isolateLibraryTarget | removeWindowsBlocks | \
  grep -i "extra-libraries" | awk 'BEGIN { FS=":"; } { print($2); }'
}

# Looks in a cabal.config file to identify all dependencies, then
# visits each of them in the .cabbages directory and prints out all
# extra-libraries.
allExtraLibrariesAux() {
  local DEPS=($(getDependencies cabal.config))
  local d
  cabalExtraLibraries
  (cd .cabbages && \
   for d in "${DEPS[@]}"; do
     (cd "$d" &&  cabalExtraLibraries)
   done)
}

# Print out an array of possibly-needed extra-libraries.
allExtraLibraries() {
  local LIBS=($(allExtraLibrariesAux | sed 's/,/\
/' | uniq))
  echo "${LIBS[@]}"
}

# Let the user know they might need to prepare system dependencies.
warnExtraLibraries() {
  local LIBS=($(allExtraLibraries))
  if [ "${#LIBS[@]}" -gt 0 ]; then
    echo
    echo "You may need to supply system dependencies!"
    echo
    echo "See the cabbage documentation for how to do this with a 'systemDeps'"
    echo "section in a cabbage.config file."
    echo
    echo "Potentially necessary extra-libraries: ${LIBS[@]}"
    read -p "Press any key to continue..." -n 1 -t 5
    echo
  fi
}

# Unversion package name. Remove the version number from a versioned
# package name.
unversionPackageName() {
  sed 's/\(.*\)-[-[:digit:].]*$/\1/' <<< "$1"
}

# Returns any flags set for the given package name in a cabbage.config
# file
flagsFor() {
  local FINDFLAGS
  read -r -d '' FINDFLAGS<<EOF
BEGIN { inFlags = 0; }
/^flags:/ { inFlags = 1; }
/^[^[:space:]]/ { if(inFlags == 2) { exit 0; } }
{
  if(inFlags == 1) {
    inFlags = 2;
  } else if(inFlags == 2) {
    gsub(/^[[:space:]]*/,"",\$1);
    if(\$1 == "$1:") {
      for(i = 2; i <= NR; ++i) {
        printf("%s", \$(i));
        if(i != NR) { printf(" "); }
      }
    }
  }
}
EOF
  awk "$FINDFLAGS"
}

# Find any systemDeps (system dependencies) specified for the named
# package in a cabbage.config file. The package name should be
# unversioned.
systemDepsFor() {
  local FINDDEPS
  read -r -d '' FINDDEPS<<EOF
BEGIN { inDeps = 0; }
/^systemDeps:/ { inDeps = 1; }
/^[^[:space:]]/ { if(inDeps == 2) { exit 0; } }
{
  if(inDeps == 1) {
    inDeps = 2;
  } else if(inDeps == 2) {
    gsub(/^[[:space:]]*/,"",\$1);
    if(\$1 == "$1:") {
      for(i = 2; i <= NR; ++i) {
        printf("%s", \$(i));
        if(i != NR) { printf(" "); }
      }
    }
  }
}
EOF
  awk "$FINDDEPS"
}

# Takes a flag setting and replaces occurences of that flag in a
# .cabal file with the boolean value indicated by the argument. An
# argument of "foo" or "+foo" sets flag "foo" to "True", while "-foo"
# sets it to "False".
fixFlagValue() {
  local PAT
  local VAL
  if [ "${1:0:1}" = "+" ]; then
    PAT="flag(${1:1})"
    VAL="True"
  elif [ "${1:0:1}" = "-" ]; then
    PAT="flag(${1:1})"
    VAL="False"
  else
    PAT="flag($1)"
    VAL="True"
  fi
  sed "s/$PAT/$VAL/g"
}

# Takes a space-separated list of flag values, and fixes their
# assignments in the .cabal file in the current directory.
fixAllFlags() {
  local CABAL=$(basename "$(ls ./*.cabal)")
  local -a ARR=($1)
  for f in "${ARR[@]}"; do
    (cat "$CABAL" | fixFlagValue "$f") > "$CABAL.tmp"
    mv "$CABAL.tmp" "$CABAL"
  done
}

# Takes a cabbage.config file and distributes subset cabbage.config
# files to directories in the .cabbages directory on an as-needed
# basis. Specifically, the flags for a named package will be copied
# into a cabbage.config file in that package's directory.
sowFlags() {
  local AWK
  read -r -d '' AWK<<'EOF'
BEGIN { FS = ":"; inFlags = 0;}
/flags:/ { inFlags = 1; }
/^[^[:space:]]/ { if(inFlags == 2) { exit 0; } }
{
  if(inFlags == 1) {
    inFlags = 2;
  } else if(inFlags == 2) {
    gsub(/^[[:space:]]*/,"",$1);
    cmd = sprintf("find .cabbages -maxdepth 1 -name '%s-[[:digit:].]*'", $1);
    if( (cmd | getline versionedName) ) {
      flags = sprintf("flags:\n  %s:%s\n", $1, $2);
      cmd = sprintf("echo '%s' > .cabbages/$(basename \"%s\")/cabbage.config", flags, versionedName);
      system(cmd);
    } else {
      # print "Ignoring flag for unknown dependency:", $1
    }
  }
}
EOF
  awk "$AWK"
}

# Takes a constraint line, returns a package name with version
getDependency() {
   sed 's/\([-_[:alpha:]]*\) \([[:digit:].]*[,]*\)/\1-\2/'
}

# Remove packages that come with GHC
filterOutWiredIn() {
  grep -Ev "^(base-[[:digit:]]|bin-package-db-[[:digit:]]|rts-[[:digit:]]|ghc-[[:digit:]]|ghc-prim-[[:digit:]]\
|integer-gmp-[[:digit:]])"
}

# Takes a cabal.config file and outputs a list of package names
getDependencies() {
  (isolateAndCleanupConstraints < "$1") | getDependency | filterOutWiredIn
  if [ -f cabbage.config ]; then
    (isolateAndCleanupConstraints < cabbage.config) | getDependency | filterOutWiredIn
  fi
}

# Get the package in this directory's full versioned name
getMyFullName() {
  local CABAL=$(ls ./*.cabal)
  { (cat "$CABAL" | tr -d '\r' | grep "^[Nn]ame:" | sed 's/^[Nn]ame:[[:space:]]*\(.*\)$/\1/');
    (cat "$CABAL" | tr -d '\r' | grep "^[Vv]ersion:" | sed 's/^[Vv]ersion:[[:space:]]*\(.*\)$/\1/'); } \
  | tr '\n' '-' | sed 's/-$//'
}

# Takes a directory name, and returns the package that can be built
# from that directory.
getAddedPackageName() {
  (cd "$1" && getMyFullName)
}

# Get a source distribution of an added-source package
getAddSource() {
  local CWD=$(pwd)
  (cd "$1" && cabal sdist -v0 --output-directory="$CWD"/.cabbages/"$(getMyFullName)")
}

# Takes an element and an array, returns -1 if the element is /not/ in
# the array; or its index if it is.
findIndex() {
  local i
  declare -a arr=("${!2}")
  for i in "${!arr[@]}"; do 
    [[ "${arr[$i]}" == "$1" ]] && echo $i && return 0; done
  echo "-1"
  return 1

  # for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  # return 1
}

# Get all dependency sources for the package in the current
# directory. This handles add-sourced dependencies, or those that
# "cabal get" can get (i.e. from hackage).
getDependencySources() {
  local ADDEDSOURCEDIRS=($(cabal sandbox list-sources | getAddedSources))
  local ADDEDSOURCEPACKAGES
  local i
  for i in "${!ADDEDSOURCEDIRS[@]}"; do
    ADDEDSOURCEPACKAGES[$i]=$(getAddedPackageName "${ADDEDSOURCEDIRS[$i]}")
  done
  local DEPS=($(getDependencies cabal.config))
  mkdir -p .cabbages
  local d
  for d in "${DEPS[@]}"; do
    i=$(findIndex "$d" ADDEDSOURCEPACKAGES[@])
    if [ "$i" -gt "-1" ]; then
      echo "Getting add-source dependency: $d"
      getAddSource "${ADDEDSOURCEDIRS[$i]}"
    elif [ -d .cabbages/"$d" ]; then
      echo "Using existing source dist of $d"
    elif [ "${d: -5}" == ".4552" ]; then
      echo "Cabbage patching globally installed package: $d"
      cabbagePatch "$d"
    else
      echo "Getting dependency: $d"
      cabal get "$d" -d .cabbages
    fi
  done
}

getPackageDBPath() {
  if [ -f cabal.sandbox.config ]; then
    cabal sandbox hc-pkg list | grep ".conf.d" | tail -n 1 | sed 's/.*\/\(.*\)-packages.conf.d.*/\1/'
    return 0
  else
    return 1
  fi
}

getSynopsis() {
  local CABAL=$(ls ./*.cabal)
  cat "$CABAL" | sed -n '/^[Ss]ynopsis/,/^[^[:space:]]/ p' | sed '$d' \
  | sed -e 's/^[Ss]ynopsis:[[:space:]]*//' -e 's/^[[:space:]]*//' -e 's/"/\\"/g' \
  | tr '\n' ' '
}

# Define an attribute for each package. Takes an array of attribute
# names, and an array of corresponding directory names that are home
# to Nix package definitions (these are all in the .cabbages
# directory).
callCabbages() {
  local -a NAMES=("${!1}")
  local PKGS
  local -a PKGS=("${!2}")
  local i

  for ((i = 0; i < ${#NAMES[@]}; ++i)); do
    echo "      ${NAMES[$i]} = callPackage .cabbages/${PKGS[$i]} {"
    echo "        inherit frozenCabbages haskellBuildTools pkgs;"
    echo "      };"
  done
}

# Build a .nix file from a .cabal file in the current directory Takes
# the ghcPlatform string, this package's name, and whether or not this
# package should define frozenCabbages: 0 = this is an upstream
# package, 1 = this is a downstream package, 2 = this is a build-tool.
mkCabbage() {
  local NIX
  local FROZENUPSTREAM
  local FROZENDEF
  local LINKSANDBOX
  local DEPS=($(getDependencies cabal.config))

  local DEPNAMES
  local i
  for ((i=0; i < ${#DEPS[@]}; ++i)); do
    # Remove version number from dependency name
    DEPNAMES[$i]=$(sed 's/\(.*\)-[[:digit:]].*/\1/' <<< "${DEPS[$i]}")
  done

  if [ $3 -gt 0 ]; then
    # This is /the/ downstream package or a build-tool

    # We will need the standard callPackage function
    FROZENUPSTREAM="callPackage"

    # We will define the frozenCabbages attribute
    IFS=$'\n' read -r -d '' FROZENDEF <<EOF
frozenCabbages = rec {
$(callCabbages DEPNAMES[@] DEPS[@])
    };
EOF

    # We will seed the sandbox /in this directory/ with our
    # dependencies in the nix store so the user can continue using a
    # standard cabal workflow (e.g. tools like ghc-mod).
    mkdir -p .cabal-sandbox/lib/"$1"
    LINKSANDBOX="ln -sFf \${pkg.outPath}/.cabal-sandbox/$1-packages.conf.d/*.conf "$(pwd)"/.cabal-sandbox/$1-packages.conf.d/\n";

    # We create a dummy sdist file so that the src attribute on the
    # downstream package's nix expression is a file, even if its
    # contents are currently bogus. This is done so that Nix can
    # evaluate the expression and install dependencies, without which
    # the configure phase (run in order to produce the sdist) of the
    # downstream package can fail due to missing dependencies.
    if ! [ -d "./dist" ]; then
      mkdir dist
    fi
    if ! [ -f "./dist/$2.tar.gz" ]; then
      touch "./dist/$2.tar.gz"
    fi
  else
    # This is an upstream package (dependency)
    FROZENUPSTREAM="frozenCabbages"
  fi

  local SYNOPSIS=$(getSynopsis)
  local SYSTEMDEPS
  if [ -f ../../cabbage.config ]; then
    local MYNAME=$(unversionPackageName "$2")
    SYSTEMDEPS=$(cat ../../cabbage.config | systemDepsFor "$MYNAME")
  else
    SYSTEMDEPS=""
  fi

  local TOOLS=($(allBuildTools))
  local TOOLSDEPS=""
  if [ "${#TOOLS[@]}" -gt 0 ]; then
    TOOLSDEPS=$(echo "${TOOLS[@]}" | awk '{for(i=1;i<=NF;i++) printf(", %s",$(i));}')
  fi

  local FRAMEWORKS=($(cabalFrameworks))
  local NIXLD
  if [ "${#FRAMEWORKS[@]}" -gt 0 ]; then
    local fw
    NIXLD="\
  NIX_LDFLAGS = lib.optionalString stdenv.isDarwin \""
    for fw in "${FRAMEWORKS[@]}"; do
      NIXLD="$NIXLD -framework $fw"
    done
    NIXLD="$NIXLD\";"
  else
    NIXLD=""
  fi

  # Now we build up the Nix expression
  IFS=$'\n' read -r -d '' NIX <<EOF
{ stdenv, lib, haskellBuildTools, pkgs$TOOLSDEPS, $FROZENUPSTREAM }:
let cabalTmp = "cabal --config-file=./.cabal/config";
    $FROZENDEF
    mkCmd = pkg: let nm = lib.strings.removePrefix "haskell-" pkg.name;
                     p = pkg.outPath;
                     pkgPath = ".cabal-sandbox/$1-packages.conf.d";
                 in ''ln -sFf \${p}/\${pkgPath}/*.conf \$out/\${pkgPath}/
                    '';
$(if [ $3 -gt 0 ]; then
    echo "    mkSetupCmd = pkg: let nm = lib.strings.removePrefix \"haskell-\" pkg.name;"
    echo "                          p = pkg.outPath;"
    echo "                      in \"$LINKSANDBOX\";"
  fi)
in
stdenv.mkDerivation rec {
  name = "haskell-$2";
  src = $(if [ $3 -eq 1 ]; then 
            echo "./dist/$2.tar.gz"
          else
            echo "./."
          fi);
  cabbageDeps = with frozenCabbages; [ $(echo "${DEPNAMES[@]}") ];
  systemDeps = (with pkgs; [ $SYSTEMDEPS ]) ++
               lib.lists.unique (lib.concatMap (lib.attrByPath ["systemDeps"] []) cabbageDeps);
  propagatedBuildInputs = systemDeps;$NIXLD
  buildInputs = [ stdenv.cc $(echo "${TOOLS[@]}")] ++ haskellBuildTools ++ cabbageDeps ++ systemDeps;

  # Build the commands to merge package databases
  cmds = lib.strings.concatStrings (map mkCmd cabbageDeps);
$(if [ $3 -gt 0 ]; then
    cat << SETUPEOF
  setupCmds = lib.strings.concatStrings (map mkSetupCmd cabbageDeps);
  setup = builtins.toFile "setup.sh" ''
    
    # Takes a GHC platform string, an array of add-source dependency
    # directories, and a string of old timestamps. Produces a new
    # timestamp string.
    updateTimeStamps() {
      local -a DEPS=("''\${!2}")
      local CUR_TIME=\$(date +%s)
      local i
      local STAMPED
      for ((i = 0; i < "''\${#DEPS[@]}"; ++i)); do
        STAMPED[\$i]="(\"''\${DEPS[\$i]}\",\$CUR_TIME)"
      done
      local LIST=\$(printf ",%s" "''\${STAMPED[@]}")
      LIST=''\${LIST:1}
      local NEWSTAMP="(\"\$1\",[\$LIST])"
      if echo "\$3" | grep -q "\$1"; then
        echo "\$3" | sed "s:(\"\$1\",[^]]*\]):\$NEWSTAMP:"
      elif echo "\$3" | grep -q "]\\\\$"; then
        echo "\$3" | sed "s:\]\\\$:,\$NEWSTAMP]:"
      else
        echo "[\$NEWSTAMP]"
      fi
    }
    eval "\$setupCmds"
    \${cabalTmp} sandbox hc-pkg recache
    SRCS=(\$(cabal sandbox list-sources | sed '1,/^\$/ d' | sed '/^\$/,\$ d'))
    OLDTIMESTAMPS=\$(cat .cabal-sandbox/add-source-timestamps)
    updateTimeStamps "$1" SRCS[@] "\$OLDTIMESTAMPS" > .cabal-sandbox/add-source-timestamps
  '';
SETUPEOF
  fi)

  builder = builtins.toFile "builder.sh" ''
    source \$stdenv/setup
    mkdir \$out

    if [ -d "\$src" ]; then
      cp -R "\$src"/* .
      #*/
      if [ -f \$src/cabal.config.bak ]; then
        cp "\$src/cabal.config.bak" \$out
      fi
    else
      tar xf "\$src" --strip=1
    fi

    chmod -R u+w .
    \${cabalTmp} sandbox --sandbox=\$out/.cabal-sandbox init -v0
    mkdir -p \$out/.cabal-sandbox/lib/$1
    eval "\$cmds"
    \${cabalTmp} sandbox hc-pkg recache

    \${cabalTmp} --builddir=\$out/dist --bindir=\$out/bin --libdir=\$out/.cabal-sandbox/lib --with-gcc=\$CC configure \$(echo \$NIX_LDFLAGS | awk -e '{ for(i=1;i <= NF; i++) { if(match(\$(i), /^-L/)) printf("--extra-lib-dirs=%s ", substr(\$(i),3)); } }')
    echo "Building..."
    \${cabalTmp} --builddir=\$out/dist build -v0
    \${cabalTmp} --builddir=\$out/dist copy
    \${cabalTmp} --builddir=\$out/dist register
    \${cabalTmp} --builddir=\$out/dist clean || true
  '';    
  meta = {
    description = "$SYNOPSIS";
  };
}
EOF

  echo "$NIX" > default.nix
}

# Freezes the cabal file in the current directory. Takes the versioned
# name of the package to prepare, and the dbPath for the current
# platform (e.g. x86_64-osx-ghc-7.8.4).
prepCabbage() {
  local d="$1"
  local dbPath="$2"
  local FLAGS
  if [ -f cabbage.config ]; then
    local MYNAME=$(unversionPackageName "$d")
    FLAGS=$(cat cabbage.config | flagsFor "$MYNAME")
    if [ -n "$FLAGS" ]; then
      echo "Applying flags \"$FLAGS\" to $MYNAME"
      fixAllFlags "$FLAGS"
    fi
  fi
  cabal sandbox init --sandbox=../../.cabal-sandbox > /dev/null

  if [ -n "$FLAGS" ]; then
    freezeCabbagePatch 0 > /dev/null
  else
    freezeCabbagePatch > /dev/null
  fi

  if ! [ $? -eq 0 ]; then
    freezeWithConstraints ../../cabal.config
  else
    mv cabal.config cabal.config.bak
    updateConstraintsAwk ../../cabal.config cabal.config.bak > cabal.config
  fi
  rm cabal.sandbox.config
  mkCabbage "$dbPath" "$d" 0
}

# Takes a flag to determine if the dependencies of all targets should
# be built. If the flag is true, then the build-depends of all targets
# are consolidated and considered when determining a build plan. The
# second argument is another flag for which true indicates this is a
# downstream package, and false indicates this is a build-tool.
mkCabbages() {
  local NUMCABALS=$(find . -maxdepth 1 -name '?*.cabal' | wc -l)
  if [ "$NUMCABALS" -gt 1 ]; then
    echo "Error: Found multiple cabal files in $(pwd)!"
    exit 1
  fi

  local CABAL=$(basename "$(ls ./*.cabal)")
  if [ -f cabbage.config ]; then
    local MYVNAME=$(getMyFullName)
    local MYNAME=$(unversionPackageName "$MYVNAME")
    local FLAGS=$(cat cabbage.config | flagsFor "$MYNAME")
    if ! [ "$FLAGS" = "" ]; then
      echo "Applying flags \"$FLAGS\" to the current project"
      cp "$CABAL" "$CABAL.cabbage.bak"
      fixAllFlags "$FLAGS"
    fi
  fi
  if [ "$1" = true ]; then
    freezeConsolidatedCabal ./*.cabal
  else
    freezeCabbagePatch 1
    if ! [ $? -eq 0 ]; then
      if [ "$2" = false ]; then
        echo "Trying emergency constraint patch..."
        freezeUnconstrained
      fi
    fi
  fi
  if [ -f "$CABAL.cabbage.bak" ]; then
    mv "$CABAL.cabbage.bak" "$CABAL"
  fi
  local RES=$?
  if [ $RES -ne 0 ]; then
    echo "Freezing the downstream package $(pwd) failed ($RES)" && false
  else
    echo "Froze downstream package at $(pwd)"
  fi
  local dbPath=$(getPackageDBPath)
  local deps=($(getDependencies cabal.config))
  getDependencySources
  if [ -f cabbage.config ]; then
    cat cabbage.config | sowFlags
  fi

  # Print a message if there are extra-libraries sepecified in any
  # .cabal file used to build the downstream package that is not
  # obviously guarded by an os(windows) or os(solaris) check.
  warnExtraLibraries

  pushd .cabbages > /dev/null
  local d
  for d in "${deps[@]}"; do
    echo "Making cabbage: $d"
    (cd "$d" && prepCabbage "$d" "$dbPath")
  done
  popd > /dev/null

  local BUILDTOOLS=($(allBuildableBuildTools))

  if [ "${#BUILDTOOLS}" -gt 0 ]; then
    echo "Making cabbages for build-tools"
    pushd .cabbages > /dev/null
    local bt
    for bt in "${BUILDTOOLS[@]}"; do
      cabal get "$bt"
      local d=$(basename $(find . -name "$bt-[[:digit:].]*" -depth 1))
      echo "Making build-tool cabbage: $d"
      (cd "$d" && cabal sandbox init && mkCabbages false false)
    done
    popd > /dev/null
  fi
  
  if [ "$2" = true ]; then
    mkCabbage "$dbPath" "$(getMyFullName)" 1
  else
    mkCabbage "$dbPath" "$(getMyFullName)" 2
  fi
}

testBenchExecutable() {
  sed -e 's/^[Tt]est-[Ss]uite[[:space:]]*\(.*\)$/executable test-suite-\1/' \
      -e 's/^[Bb]enchmark[[:space:]]*\(.*\)$/executable benchmark-\1/' \
      -e 's/^[[:space:]]*[Tt]ype:.*$//'
}

freezeConsolidatedCabal() {
  local NUMCABALS=$(find . -maxdepth 1 -name '?*.cabal' | wc -l)
  if [ "$NUMCABALS" -gt 1 ]; then
    echo "Error: Found multiple cabal files!"
    exit 1
  fi
  local REALCABAL=$(basename "$(ls ./*.cabal)")
  (cat "$REALCABAL" | testBenchExecutable) > cabbageDummy.cabal
  mv "$REALCABAL" cabbageBackup.bak
  freezeCabbagePatch 1
  mv cabbageBackup.bak "$REALCABAL"
  rm cabbageDummy.cabal
}

# Takes a cabbage-patched versioned package name; prepares an sdist.
cabbagePatch() {
  if ! [ ${1: -5} = ".4552" ]; then
    echo "Bad call to cabbagePatch with $1"
    exit 1
  fi
  local NAME=${1%".4552"}
  cabal get "$NAME" -d .cabbages
  (cd .cabbages && \
   mv "$NAME" "$1" && \
   (cd "$1" && \
    local CABAL=$(basename "$(ls ./*.cabal)") && \
     mv "$CABAL" "$CABAL".bak && \
     sed 's/\([Vv]ersion:[[:space:]]*\)\([[:digit:].]*\)$/\1\2.4552/' "$CABAL".bak > "$CABAL" && \
     rm "$CABAL".bak))
}

# Determines if a newer version of a globally installed package is
# required. If so, the exit code is 1. If no globally-installed
# package is to be upgraded, the exit code is 0.
upgradesGlobal() {
  local AWK
  read -r -d '' AWK<<'EOF'
BEGIN {
  firstLine = 1;
  inConstraints = 0;
}
/^[Cc]onstraints:/ {
  inConstraints = 1;
  gsub(/^[Cc]onstraints:/,"",$0);
}
{
  if(firstLine) {
    split($0,arr," ");
    for(i in arr) {
      match(arr[i], /-[[:digit:].]*$/);
      pkg = substr(arr[i], 1, RSTART-1);
      ver = substr(arr[i],RSTART+1);
      globallyInstalled[pkg] = ver;
    }
    firstLine = 0;
  } else if(inConstraints) {
    if(match($0, /^[[:space:]]/)) {
      inConstraints = 2;
      match($0, /^[[:space:]]*/);
      sub(/^[[:space:]]*/,"",$0);
      match($0, " ==");
      pkgName = substr($0, 1, RSTART - 1);
      versionStart = RSTART + 3;
      sub(/,/,"",$0);
      pkgVersion = substr($0, versionStart);
      versioned = sprintf("%s-%s",pkgName,pkgVersion);
      if(pkgName in globallyInstalled) {
        if(globallyInstalled[pkgName] != pkgVersion) {
          print(versioned, "is an upgrade from the global package database");
          exit 1;
        }
      }
    } else {
      inConstraints = 0;
    }
  }
}
EOF
  awk "$AWK"
}

# Takes a first line that is "ghc-pkg list --global --simple-output"
# and then a piped cabal.config. Globally-installed packages are
# removed from the dependency list. If any globally-installed package
# is updated, then they must all be cabbage patched.
filterOutGlobals() {
  local AWK
  read -r -d '' AWK<<'EOF'
BEGIN {
  firstLine = 1;
  inConstraints = 0;
  firstConstraint = 1;
}
/^[Cc]onstraints:/ {
  inConstraints = 1;
  printf("constraints:");
  gsub(/^[Cc]onstraints:/,"",$0);
}
{
  if(firstLine) {
    split($0,arr," ");
    for(i in arr) {
      globallyInstalled[arr[i]] = 1;
    }
    firstLine = 0;
  } else if(inConstraints) {
    if(match($0, /^[[:space:]]/)) {
      inConstraints = 2;
      match($0, /^[[:space:]]*/);
      spacePrefix = RLENGTH;
      sub(/^[[:space:]]*/,"",$0);
      match($0, " ==");
      pkgName = substr($0, 1, RSTART - 1);
      versionStart = RSTART + 3;
      sub(/,/,"",$0);
      pkgVersion = substr($0, versionStart);
      versioned = sprintf("%s-%s",pkgName,pkgVersion);
      if(!(versioned in globallyInstalled)) {
        if(firstConstraint) {
          printf(" ");
          firstConstraint = 0;
        } else {
          for(i = 0; i < spacePrefix; ++i) printf(" ");
        }
        printf("%s,\n", $0);
      }
    } else {
      inConstraints = 0;
      print($0);
    }
  } else {
    print($0);
  }
}
EOF
  awk "$AWK"
}

# Tweaks the constraints in a piped ~cabal.config~ file to replace
# globally installed packages with cabbage patched versions.
cabbagePatchConfig() {
  local AWK
  read -r -d '' AWK<<'EOF'
BEGIN {
  firstLine = 1;
  inConstraints = 0;
}
/^[Cc]onstraints:/ {
  inConstraints = 1;
  printf("constraints:");
  gsub(/^[Cc]onstraints:/,"",$0);
}
{
  if(firstLine) {
    split($0,arr," ");
    for(i in arr) {
      globallyInstalled[arr[i]] = 1;
    }
    firstLine = 0;
  } else if(inConstraints) {
    if(match($0, /^[[:space:]]/)) {
      inConstraints = 2;
      match($0, /^[[:space:]]*/);
      for(i = 0; i < RLENGTH; ++i) printf(" ");
      sub(/^[[:space:]]*/,"",$0);
      match($0, " ==");
      pkgName = substr($0, 1, RSTART - 1);
      versionStart = RSTART + 3;
      hasComma = 0;
      if(match($0, ",")) {
        hasComma = 1;
      }
      sub(/,/,"",$0);
      pkgVersion = substr($0, versionStart);
      versioned = sprintf("%s-%s",pkgName,pkgVersion);
      if(versioned in globallyInstalled) {
        printf("%s ==%s.4552", pkgName, pkgVersion);
      } else {
        printf("%s", $0);
      }
      if(hasComma) printf(",\n");
      else printf("\n");
    } else {
      inConstraints = 0;
      print($0);
    }
  } else {
    print($0);
  }
}
EOF
  awk "$AWK"
}

# Print the list of globally installed packages that can be
# reinstalled.
getReinstallableGlobals() {
  sed -e 's/base-[[:digit:].]*//' \
      -e 's/bin-package-db-[[:digit:].]*//' \
      -e 's/rts-[[:digit:].]*//' \
      -e 's/ghc-[[:digit:].]*//' \
      -e 's/ghc-prim-[[:digit:].]*//' \
      -e 's/integer-gmp-[[:digit:].]*//' | \
  sed 's/  [ ]*/ /'
}

# Check /nix/store for a cabal.config.bak for this versioned
# package. If not found, run cabal freeze, otherwise use the old
# file. This is just used to get a list of transitive dependencies.
freezeIfNeeded() {
  local NAME=$(getMyFullName)
  local d
  for d in $(ls -d /nix/store/*-haskell-"$NAME" 2> /dev/null; ls -d /nix/store/*-haskell-"$NAME".4552 2> /dev/null); do
    if [ -f "$d"/cabal.config.bak ]; then
      cp "$d"/cabal.config.bak .
      chmod u+w cabal.config.bak
      return 0
    fi
  done
  cabal freeze && mv cabal.config cabal.config.bak
}

# Freeze a cabal package, then tweak the ~cabal.config~ file to
# cabbage patch references to globally installed packages. If an
# argument is given, we do /not/ search for a cached build plan. This
# is useful when passing cabbage the "-a" flag, which will produce a
# different build plan than when this package is built as a dependency
# of something else.
freezeCabbagePatch() {
  if [ "$#" -gt 0 ]; then
    cabal freeze && mv cabal.config cabal.config.bak

    if [ $1 -eq 1 ]; then
      # If a globally-installed package must be upgraded, then we cabbage
      # patch the build plan to allow us to shadow globally-installed
      # packages. Otherwise, we do not mention globally-installed packages
      # in the Nix build plan as GHC will pull them in by default.
      local GLOBALS=$(ghc-pkg list --global --simple-output)
      (echo "$GLOBALS"; cat cabal.config.bak) | upgradesGlobal
      if [ $? -eq 1 ]; then
        (((echo "$GLOBALS" | getReinstallableGlobals); cat cabal.config.bak) | cabbagePatchConfig) > cabal.config
        rm cabal.config.bak
      else
        ((echo "$GLOBALS"; cat cabal.config.bak) | filterOutGlobals | sed '$ s/,//') > cabal.config
        # mv cabal.config.bak cabal.config
      fi
    else
      mv cabal.config.bak cabal.config
    fi
  else
    freezeIfNeeded
    mv cabal.config.bak cabal.config
  fi
}

# Takes a versioned file name, e.g. "foo-0.8.2",
# and returns "foo ==0.8.2"
mkConstraintString() {
  sed 's/\(.*\)-\([[:digit:]].*\)/\1 ==\2/' <<< "$1"
}

# Takes a versioned file name and produces a minimal cabal file for
# freezing purposes.
mkDummyCabal() {
  local CABAL
  local SELFDEP=$(mkConstraintString "$1")

  read -r -d '' CABAL<<EOF
name:               Dummy
version:            0.1.0.0
build-type:         Simple
cabal-version:      >=1.10

library
  build-depends:    $SELFDEP
  exposed-modules:
EOF

  echo "$CABAL"
}

# If the argument is a cabal file, copy the contents of the directory
# it is in to the current directory. Otherwise, try using ~cabal get~
# to download the package from hackage.
getCabalFile() {
  if [ -f "$1" ]; then
    cp -R "$(dirname "$1")"/* .
  else
    mkdir -p .cabbages
    cabal get "$1" -d .cabbages
    local VERSIONED_NAME=$(ls .cabbages)
    mkDummyCabal "$VERSIONED_NAME" > dummy.cabal
  fi
}

# A default Nix expression suitable for nix-shell or installation.
defaultShell() {
  local TOOLS=($(allBuildableBuildTools))

  local TOOLSDEPS
  if [ "${#TOOLS[@]}" -gt 0 ]; then
    TOOLSDEPS=$(echo " ${TOOLS[@]}")
  else
    TOOLSDEPS=""
  fi
  local NIX
  IFS=$'\n' read -r -d '' NIX <<EOF
let pkgs = import <nixpkgs> {};
    haskellBuildTools = with pkgs;
                        [ ghc.ghc784
                          haskellPackages.cabalInstall_1_20_0_6 ];
    happy = pkgs.haskellngPackages.happy;
    alex = pkgs.haskellngPackages.alex;
    callPackage = pkgs.lib.callPackageWith (pkgs // {inherit happy alex callPackage$TOOLSDEPS;});
$(if [ "${#TOOLS[@]}" -gt 0 ]; then
    local t
    for t in "${TOOLS[@]}"; do
      local buildTool=$(basename $(find .cabbages -name "$t-[[:digit:].]*" -depth 1))
      echo "    $t = callPackage .cabbages/$buildTool/default.nix {"
      echo "      inherit pkgs haskellBuildTools;"
      echo "    };"
    done
  fi)
in callPackage ./default.nix {
   inherit pkgs haskellBuildTools;
}
EOF
  echo "$NIX"
}

getNamedCabbage() {
  local NIX
  read -r -d '' NIX<<EOF
with import <nixpkgs> {};
with import ./shell.nix;
(lib.findFirst (pkg: (builtins.parseDrvName pkg.name).name == "haskell-$1")
               {name="Error";}
               cabbageDeps).outPath
EOF
  echo "$NIX" > getNamedCabbage.nix

  local CABBAGE
  CABBAGE=$(nix-instantiate --eval getNamedCabbage.nix | sed 's/^"\(.*\)"$/\1/')
  echo "To install $1 in your environment, run:"
  echo "nix-env -i $CABBAGE"
}

showHelp() {
  echo "Usage: cabbage [-a] [-b] [packageName]"
  echo ""
  echo "- Run cabbage in a directory with a .cabal file to build Nix"
  echo "  expressions for the current package and all of its dependencies."
  echo "  Then run 'nix-shell --run 'sh $setup'' to ensure that all "
  echo "  dependencies are available in the Nix store, and to link them into "
  echo "  the sandbox. "
  echo "  If no sandbox is in the current directory, a new one will be created."
  echo ""
  echo "- The '-a' option will additionally link the dependencies of any "
  echo "  benchmark and test suites. "
  echo ""
  echo "- The '-b' option will build the project with nix-build."
  echo ""
  echo "- If cabbage is given a path to a .cabal file or a package name "
  echo "  (with optional version suffix) available on hackage, that package "
  echo "  will be built in a temporary directory so that it is available in "
  echo "  the Nix store for future builds. If you want executables provided "
  echo "  by that package to be linked into your environment, follow the "
  echo "  instructions in the last line of cabbage output."
}

ALLTARGETS=false

while getopts ":abh" opt; do
  case "$opt" in
    a) ALLTARGETS=true;;
    b) cabal configure && cabal sdist -v0 && nix-build shell.nix; exit 0;;
    h|\?) showHelp; exit 0;;
  esac
done
shift $((OPTIND - 1))

if [ "$#" -eq 0 ]; then
  if ! [ -f cabal.sandbox.config ]; then
    cabal sandbox init
  fi
  mkCabbages $ALLTARGETS true
  if ! [ -f shell.nix ]; then
    defaultShell > shell.nix
  fi
else
  mytmpdir=$(mktemp -d 2>/dev/null || mktemp -d -t 'cabbage-temp')
  (cd "$mytmpdir" \
      && getCabalFile "$1" \
      && cabal sandbox init \
      && mkCabbages $ALLTARGETS true \
      && defaultShell > shell.nix \
      && cabal sandbox hc-pkg recache \
      && nix-shell --command "echo 'Done'" \
      && getNamedCabbage "$1")
  rm -r "$mytmpdir"
fi
