#!/usr/bin/env bash

# List directories of added sources
getAddedSources() {
  echo "$1" | sed '1,/^$/ d' | sed '/^$/,$ d'
}

# Takes two sets of constraints separates by a line containing only
# "***" and returns the second set of package names with versions
# drawn from the first set.
awkConstraintIntersection() {
  read -r -d '' intersect<<'EOF'
BEGIN {
  downConfig = 1;
  numUpstream = 0;
}
{ 
  if($1 == "***") {
    downConfig = 0;
  } else if(downConfig) {
    downstream[$1] = $2;
  } else {
    numUpstream++;
    upstream[$1] = downstream[$1];
  }
}
END {
  cnt = 0;
  for (p in upstream) {
    if(cnt==0) {
      printf("constraints: ");
    } else {
      printf("             ");
    }
    printf("%s ==%s", p, upstream[p]);
    cnt++;
    if(cnt != numUpstream) { printf(",\n"); }
  }
}
EOF
awk "$intersect"
# <<< $(cat $1 - $2 <<< "***")
}

# Takes a configuration file and extracts the "constraints" section.
isolateConstraints() {
  sed -n '/^constraints/,/^[^[:space:]]/ p' | sed -e 'n' -e '/^[^[:space:]]/,$ d'
}

isolateAndCleanupConstraints() {
  isolateConstraints | sed -e 's/^constraints: //' -e 's/^[[:space:]]*//' \
  | sed 's/\([-_[:alpha:]]*\) ==\([[:digit:].]*\),*$/\1 \2/'
}
 
# Takes two constraint files, downstream and upstream
updateConstraintsAwk() {
  { (isolateAndCleanupConstraints < "$1"); \
    echo "***"; \
    (isolateAndCleanupConstraints < "$2"); } \
  | awkConstraintIntersection
}

pinBuildDepends() {
  local PIN
  read -r -d '' PIN<<'EOF'
BEGIN { 
  downConfig = 1;
  buildDep = 0;
}
/[[:space:]]*[Bb][Uu][Ii][Ll][Dd]-[Dd][Ee][Pp][Ee][Nn][Dd][Ss]:/ {
  match($0, /^[[:space:]]*/);
  indentation = RLENGTH;
  for(i = 0; i < RLENGTH; ++i) printf(" ");
  printf("build-depends:");

  buildDep = 2;
  gsub(/^[[:space:]]*[Bb][Uu][Ii][Ll][Dd]-[Dd][Ee][Pp][Ee][Nn][Dd][Ss]:/,"",$0);
}
{
  if(downConfig && $1 == "***") {
    downConfig = 0;
    FS=",";
  } else if(downConfig) {
    downstream[$1] = $2;
  } else if(buildDep) {
    match($0, /^[[:space:]]*/);
    if(buildDep == 2 || RLENGTH > indentation) {
      buildDep = 1;
      # Update a line of a build-depend
      for(i = 1; i <= NF; ++i) {
        if(i == NF && match($(i), "^[[:space:]]*$")) {
        } else {
          if(i == 1) {
            # Add leading spaces
            match($(i), "^[[:space:]]*");
            for(j = 0; j < RLENGTH; ++j) {
              printf(" ");
            }
          }
          gsub(/^[[:space:]]*/,"",$(i));
          gsub(/[[:space:]]*$/,"",$(i));
          if(match($(i), "[ ><=]")) {
            pkgName = substr($(i), 1, RSTART - 1);
            if(pkgName in downstream) {
              printf("%s ==%s", pkgName, downstream[pkgName]);
            } else {
              printf("%s", $(i));
            }
          } else {
            if($(i) in downstream) {
              printf("%s ==%s", $(i), downstream[$(i)]);
            } else {
              printf("%s", $(i));
            }
          }
        }
        if(i < NF) printf(", ");
      }
      printf("\n");
    } else {
      # We've left a build-depends stanza
      buildDep = 0;
      print $0
    }
  } else {
    # Everything else gets printed
    print $0
  }
}
EOF
  awk "$PIN"
}

# Given a build-depends stanza, remove the "build-depends:" string,
# commas between dependencies, and line comments. Then, remove leading
# spaces and reformat each dependency as "package, versions".
buildDependsReformat() {
  sed -e 's/^[[:space:]]*[Bb][Uu][Ii][Ll][Dd]-[Dd][Ee][Pp][Ee][Nn][Dd][Ss]:[[:space:]]*//' -e 's/,/\
  /g' -e 's/--.*$//' | sed -e 's/^[[:space:]]*//' -e 's/ /, /' \
  -e 's/\([[:alpha:]]\)\([<>=]\)/\1, \2/'
}

# Takes a configuration file and extracts the "constraints" section.
isolateConstraints() {
  sed -n '/^constraints/,/^[^[:space:]]/ p' | sed -e 'n' -e '/^[^[:space:]]/,$ d'
}

isolateAndCleanupConstraints() {
  isolateConstraints | sed -e 's/^constraints: //' -e 's/^[[:space:]]*//' \
  | sed 's/\([-_[:alpha:]]*\) ==\([[:digit:].]*\),*$/\1 \2/'
}

# The start of a Cabal library specification, ready for a
# build-depends stanza.
dummyCabalLibrary() {
  echo "name:               Dummy"
  echo "version:            0.1.0.0"
  echo "build-type:         Simple"
  echo "cabal-version:      >=1.10"
  echo ""
  echo "library"
  echo "  exposed-modules:"
}

# Takes a constraints file and works with the .cabal file in the
# current directory.
freezeWithConstraints() {
  local NUMCABALS=$(find . -maxdepth 1 -name '?*.cabal' | wc -l)
  if [ "$NUMCABALS" -gt 1 ]; then
    echo "Error: Found multiple cabal files in $(pwd)"
    exit 1
  fi
  local REALCABAL=$(basename "$(ls ./*.cabal)")
  ({ (isolateAndCleanupConstraints < "$1"); echo "***"; cat "$REALCABAL"; } \
   | pinBuildDepends) > cabbageDummy.cabal
  mv "$REALCABAL" cabbageBackup.bak
  cabal freeze
  local OK=$?
  mv cabbageBackup.bak "$REALCABAL"
  rm cabbageDummy.cabal
  return $OK
}

# Versioned package name. Remove the version number from a versioned
# package name.
versionedPackageName() {
  sed 's/\(.*\)-[-[:digit:].]*$/\1/' <<< "$1"
}

# Returns any flags set for the given package name in a cabbage.config
# file
flagsFor() {
  local FINDFLAGS
  read -r -d '' FINDFLAGS<<EOF
BEGIN { inFlags = 0; }
/^flags:/ { inFlags = 1; }
/^[^[:space:]]/ { if(inFlags == 2) { exit 0; } }
{
  if(inFlags == 1) {
    inFlags = 2;
  } else if(inFlags == 2) {
    gsub(/^[[:space:]]*/,"",\$1);
    if(\$1 == "$1:") {
      for(i = 2; i <= NR; ++i) {
        printf("%s", \$(i));
        if(i != NR) { printf(" "); }
      }
    }
  }
}
EOF
  awk "$FINDFLAGS"
}

# Takes a flag setting and replaces occurences of that flag in a
# .cabal file with the boolean value indicated by the argument. An
# argument of "foo" or "+foo" sets flag "foo" to "True", while "-foo"
# sets it to "False".
fixFlagValue() {
  local PAT
  local VAL
  if [ "${1:0:1}" = "+" ]; then
    PAT="flag(${1:1})"
    VAL="True"
  elif [ "${1:0:1}" = "-" ]; then
    PAT="flag(${1:1})"
    VAL="False"
  else
    PAT="flag($1)"
    VAL="True"
  fi
  sed "s/$PAT/$VAL/g"
}

# Takes a space-separated list of flag values, and fixes their
# assignments in the .cabal file in the current directory.
fixAllFlags() {
  local CABAL=$(basename "$(ls ./*.cabal)")
  local -a ARR=($1)
  for f in "${ARR[@]}"; do
    (cat "$CABAL" | fixFlagValue "$f") > "$CABAL.tmp"
    mv "$CABAL.tmp" "$CABAL"
  done
}

# Takes a cabbage.config file and distributes subset cabbage.config
# files to directories in the .cabbages directory on an as-needed
# basis. Specifically, the flags for a named package will be copied
# into a cabbage.config file in that package's directory.
sowFlags() {
  local AWK
  read -r -d '' AWK<<'EOF'
BEGIN { FS = ":"; inFlags = 0;}
/flags:/ { inFlags = 1; }
/^[^[:space:]]/ { if(inFlags == 2) { exit 0; } }
{
  if(inFlags == 1) {
    inFlags = 2;
  } else if(inFlags == 2) {
    gsub(/^[[:space:]]*/,"",$1);
    cmd = sprintf("find .cabbages -maxdepth 1 -name '%s-[[:digit:].]*'", $1);
    if( (cmd | getline versionedName) ) {
      flags = sprintf("flags:\n  %s:%s\n", $1, $2);
      cmd = sprintf("echo '%s' > .cabbages/$(basename \"%s\")/cabbage.config", flags, versionedName);
      system(cmd);
    } else {
      # print "Ignoring flag for unknown dependency:", $1
    }
  }
}
EOF
  awk "$AWK"
}

# Takes a versioned package name, determines if it is already
# available.
globallyInstalled() {
  ghc-pkg --global list "$1" | grep -Fq "$1"
}

# Takes a constraint line, returns a package name with version
getDependency() {
   sed -E 's/(constraints: |[[:space:]]*)([-_[:alpha:]]*) ==([[:digit:].]*)(,)?/\2-\3/'
}

# Remove packages that come with GHC
filterOutWiredIn() {
  grep -Ev "^(base-\d|bin-package-db-\d|rts-\d|ghc-\d|ghc-prim-\d\
|integer-gmp-\d)"
}

# Takes a cabal.config file and outputs a list of package names
getDependencies() {
  (isolateConstraints < "$1") | getDependency | filterOutWiredIn
  if [ -f cabbage.config ]; then
    (isolateConstraints < cabbage.config) | getDependency | filterOutWiredIn
  fi
}

# Get dependencies that are /not/ in the global package DB
getUninstalledDependencies() {
  read -r -d '' FILTER<<'EOF'
BEGIN {
  firstLine = 1;
}
{
  if(firstLine) {
    split($0,arr," ");
    for(i in arr) {
      globallyInstalled[arr[i]] = 1;
    }
    firstLine = 0;
  } else {
    if(!($1 in globallyInstalled)) {
      print($1);
    }
  }
}
EOF
  (ghc-pkg list --global --simple-output; getDependencies "$1") | awk "$FILTER"
}

# Get the package in this directory's full versioned name
getMyFullName() {
  cabal info ./*.cabal | head -n 1 | sed 's/* \([^[:space:]]*\).*/\1/'
}

# Takes a directory name, and returns the package that can be built
# from that directory.
getAddedPackageName() {
  (cd "$1" && getMyFullName)
}

# Get a source distribution of an added-source package
getAddSource() {
  local CWD=$(pwd)
  (cd "$1" && cabal sdist -v0 --output-directory="$CWD"/.cabbages/"$(getMyFullName)")
}

# Takes an element and an array, returns -1 if the element is /not/ in
# the array; or its index if it is.
findIndex() {
  local i
  declare -a arr=("${!2}")
  for i in "${!arr[@]}"; do 
    [[ "${arr[$i]}" == "$1" ]] && echo $i && return 0; done
  echo "-1"
  return 1

  # for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  # return 1
}

# Get all dependency sources for the package in the current
# directory. This handles add-sourced dependencies, or those that
# "cabal get" can get (i.e. from hackage).
getDependencySources() {
  local LISTEDSOURCES="$(cabal sandbox list-sources))"
  local ADDEDSOURCEDIRS=($(getAddedSources "$LISTEDSOURCES"))
  local ADDEDSOURCEPACKAGES
  local i
  for i in "${!ADDEDSOURCEDIRS[@]}"; do
    ADDEDSOURCEPACKAGES[$i]=$(getAddedPackageName "${ADDEDSOURCEDIRS[$i]}")
  done
  local DEPS=($(getUninstalledDependencies cabal.config))
  mkdir -p .cabbages
  local d
  for d in "${DEPS[@]}"; do
    i=$(findIndex "$d" ADDEDSOURCEPACKAGES[@])
    if [ "$i" -gt "-1" ]; then
      echo "Getting add-source dependency: $d"
      getAddSource "${ADDEDSOURCEDIRS[$i]}"
    else
      if [ -d .cabbages/"$d" ]; then
        echo "Using existing source dist of $d"
      else
        echo "Getting dependency: $d"
        cabal get "$d" -d .cabbages
      fi
    fi
  done
}

getPackageDBPath() {
  if [ -f cabal.sandbox.config ]; then
    cabal sandbox hc-pkg list | grep ".conf.d" | tail -n 1 | sed 's/.*\/\(.*\)-packages.conf.d.*/\1/'
    return 0
  else
    return 1
  fi
}

# Define an attribute for each package. Takes an array of attribute
# names, and an array of corresponding directory names that are home
# to Nix package definitions (these are all in the .cabbages
# directory).
callCabbages() {
  local -a NAMES=("${!1}")
  local PKGS
  local -a PKGS=("${!2}")
  local i

  for ((i = 0; i < ${#NAMES[@]}; ++i)); do
    echo "      ${NAMES[$i]} = callPackage .cabbages/${PKGS[$i]} {"
    echo "        inherit frozenCabbages haskellBuildTools;"
    echo "      };"
  done
}

# Build a .nix file from a .cabal file in the current directory Takes
# the ghcPlatform string, this package's name, and whether or not this
# package should define frozenCabbages.
mkCabbage() {
  local NIX
  local FROZENUPSTREAM
  local FROZENDEF
  local LINKSANDBOX
  local DEPS=($(getUninstalledDependencies cabal.config))

  local DEPNAMES
  local i
  for ((i=0; i < ${#DEPS[@]}; ++i)); do
    # Remove version number from dependency name
    DEPNAMES[$i]=$(sed 's/\(.*\)-[[:digit:]].*/\1/' <<< "${DEPS[$i]}")
  done

  if [ "$3" = true ]; then
    # This is /the/ downstream package

    # We will need the standard callPackage function
    FROZENUPSTREAM="callPackage"

    # We will define the frozenCabbages attribute
    IFS=$'\n' read -r -d '' FROZENDEF <<EOF
frozenCabbages = rec {
$(callCabbages DEPNAMES[@] DEPS[@])
    };
EOF

    # We will seed the sandbox /in this directory/ with our
    # dependencies in the nix store so the user can continue using a
    # standard cabal workflow (e.g. tools like ghc-mod).
    mkdir -p .cabal-sandbox/lib/"$1"
    LINKSANDBOX="mkdir -p $(pwd)/.cabal-sandbox/lib/$1/\${nm} && ln -sFf \${p}/.cabal-sandbox/lib/$1/\${nm}/* $(pwd)/.cabal-sandbox/lib/$1/\${nm} && ln -sFf \${pkg.outPath}/.cabal-sandbox/$1-packages.conf.d/\${nm}*.conf "$(pwd)"/.cabal-sandbox/$1-packages.conf.d/";

    # We will give Nix an sdist of this package as the source path
    cabal sdist -v0
  else
    # This is an upstream package (dependency)
    FROZENUPSTREAM="frozenCabbages"
  fi
  
  local SYNOPSIS=$(cabal info ./*.cabal \
                   | grep "Synopsis:" \
                   | sed -e 's/[[:space:]]*Synopsis:[[:space:]]*\(.*\)/\1/'  -e 's/"/\\"/g')

  # Now we build up the Nix expression
  IFS=$'\n' read -r -d '' NIX <<EOF
{ stdenv, lib, haskellBuildTools, $FROZENUPSTREAM }:
let cabalTmp = "cabal --config-file=./.cabal/config";
    $FROZENDEF
    mkCmd = pkg: let nm = lib.strings.removePrefix "haskell-" pkg.name;
                     p = pkg.outPath;
                     libPath = ".cabal-sandbox/lib/$1";
                     pkgPath = ".cabal-sandbox/$1-packages.conf.d";
                 in ''ln -sFf \${p}/\${libPath}/* \$out/\${libPath}/
                      ln -sFf \${p}/\${pkgPath}/*.conf \$out/\${pkgPath}/
                    '';
    mkSetupCmd = pkg: let nm = lib.strings.removePrefix "haskell-" pkg.name;
                          p = pkg.outPath;
                      in "$LINKSANDBOX\n";
in
stdenv.mkDerivation rec {
  name = "haskell-$2";
  src = $(if [ "$3" = true ]; then 
            echo "./dist/$2.tar.gz"
          else 
            echo "./."
          fi);
  cabbageDeps = with frozenCabbages; [ $(echo "${DEPNAMES[@]}") ];
  buildInputs = [ stdenv.cc ] ++ haskellBuildTools ++ cabbageDeps;

  # Build the commands to merge package databases
  cmds = lib.strings.concatStrings (map mkCmd cabbageDeps);
  setupCmds = lib.strings.concatStrings (map mkSetupCmd cabbageDeps);

  setup = builtins.toFile "setup.sh" ''
    
    # Takes a GHC platform string, an array of add-source dependency
    # directories, and a string of old timestamps. Produces a new
    # timestamp string.
    updateTimeStamps() {
      local -a DEPS=("''\${!2}")
      local CUR_TIME=\$(date +%s)
      local i
      local STAMPED
      for ((i = 0; i < "''\${#DEPS[@]}"; ++i)); do
        STAMPED[\$i]="(\"''\${DEPS[\$i]}\",\$CUR_TIME)"
      done
      local NEWSTAMP="(\"\$1\",[''\${STAMPED[@]}])"
      if echo "\$3" | grep -q "\$1"; then
        echo "\$3" | sed "s:(\"\$1\",[^]]*\]):\$NEWSTAMP:"
      else
        echo "\$3" | sed "s:\]\\\$:\$NEWSTAMP]:"
      fi
    }
    eval "\$setupCmds"
    \${cabalTmp} sandbox hc-pkg recache
    SRCS=(\$(cabal sandbox list-sources | sed '1,/^\$/ d' | sed '/^\$/,\$ d'))
    OLDTIMESTAMPS=\$(cat .cabal-sandbox/add-source-timestamps)
    updateTimeStamps "$1" SRCS[@] "\$OLDTIMESTAMPS" > .cabal-sandbox/add-source-timestamps
  '';
  builder = builtins.toFile "builder.sh" ''
    source \$stdenv/setup
    mkdir \$out

    if [ -d "\$src" ]; then
      cp -R "\$src"/* .
      #*/
    else
      tar xf "\$src" --strip=1
    fi

    \${cabalTmp} sandbox --sandbox=\$out/.cabal-sandbox init
    mkdir -p \$out/.cabal-sandbox/lib/$1
    eval "\$cmds"
    \${cabalTmp} sandbox hc-pkg recache

    \${cabalTmp} --builddir=\$out/dist --bindir=\$out/bin --libdir=\$out/.cabal-sandbox/lib --with-gcc=\$CC configure
    echo "Building..."
    \${cabalTmp} --builddir=\$out/dist build -v0
    \${cabalTmp} --builddir=\$out/dist copy
    \${cabalTmp} --builddir=\$out/dist register
    \${cabalTmp} --builddir=\$out/dist clean || true
  '';    
  meta = {
    description = "$SYNOPSIS";
  };
}
EOF

  echo "$NIX" > default.nix
}

prepCabbage() {
  if [ -f cabbage.config ]; then
    local MYNAME=$(versionedPackageName "$d")
    local FLAGS=$(cat cabbage.config | flagsFor "$MYNAME")
    if ! [ "$FLAGS" = "" ]; then
      echo "Applying flags \"$FLAGS\" to $MYNAME"
      fixAllFlags "$FLAGS"
    fi
  fi
  cabal freeze > /dev/null
  if ! [ $? -eq 0 ]; then
    freezeWithConstraints ../../cabal.config
  else
    mv cabal.config cabal.config.bak
    updateConstraintsAwk ../../cabal.config cabal.config.bak > cabal.config
  fi
  mkCabbage "$dbPath" "$d" false
}

# Takes a flag to determine if the dependencies of all targets should
# be built. If the flag is true, then the build-depends of all targets
# are consolidated and considered when determining a build plan.
mkCabbages() {
  local NUMCABALS=$(find . -maxdepth 1 -name '?*.cabal' | wc -l)
  if [ "$NUMCABALS" -gt 1 ]; then
    echo "Error: Found multiple cabal files in $(pwd)!"
    exit 1
  fi
  local CABAL=$(basename "$(ls ./*.cabal)")
  if [ -f cabbage.config ]; then
    local MYVNAME=$(getMyFullName)
    local MYNAME=$(versionedPackageName "$MYVNAME")
    local FLAGS=$(cat cabbage.config | flagsFor "$MYNAME")
    if ! [ "$FLAGS" = "" ]; then
      echo "Applying flags \"$FLAGS\" to the current project"
      cp "$CABAL" "$CABAL.cabbage.bak"
      fixAllFlags "$FLAGS"
    fi
  fi
  if [ "$1" = true ]; then
    freezeConsolidatedCabal ./*.cabal
  else
    cabal freeze
  fi
  if [ -f "$CABAL.cabbage.bak" ]; then
    mv "$CABAL.cabbage.bak" "$CABAL"
  fi
  local RES=$?
  if [ $RES -ne 0 ]; then
    echo "Freezing the downstream package $(pwd) failed ($RES)" && false
  else
    echo "Froze downstream package at $(pwd)"
  fi
  local dbPath=$(getPackageDBPath)
  local deps=($(getDependencies cabal.config))
  getDependencySources
  if [ -f cabbage.config ]; then
    cat cabbage.config | sowFlags
  fi
  pushd .cabbages > /dev/null
  for d in "${deps[@]}"; do
    if ! globallyInstalled $d; then
      echo "Making cabbage: $d"
      (cd "$d" && prepCabbage)
    fi
  done
  popd > /dev/null
  
  mkCabbage "$dbPath" "$(getMyFullName)" true
}

testBenchExecutable() {
  sed -e 's/^[Tt]est-[Ss]uite[[:space:]]*\(.*\)$/executable test-suite-\1/' \
      -e 's/^[Bb]enchmark[[:space:]]*\(.*\)$/executable benchmark-\1/' \
      -e 's/^[[:space:]]*[Tt]ype:.*$//'
}

freezeConsolidatedCabal() {
  local NUMCABALS=$(find . -maxdepth 1 -name '?*.cabal' | wc -l)
  if [ "$NUMCABALS" -gt 1 ]; then
    echo "Error: Found multiple cabal files!"
    exit 1
  fi
  local REALCABAL=$(basename "$(ls ./*.cabal)")
  (cat "$REALCABAL" | testBenchExecutable) > cabbageDummy.cabal
  mv "$REALCABAL" cabbageBackup.bak
  cabal freeze
  mv cabbageBackup.bak "$REALCABAL"
  rm cabbageDummy.cabal
}

# Takes a versioned file name, e.g. "foo-0.8.2",
# and returns "foo ==0.8.2"
mkConstraintString() {
  sed 's/\(.*\)-\([[:digit:]].*\)/\1 ==\2/' <<< "$1"
}

# Takes a versioned file name and produces a minimal cabal file for
# freezing purposes.
mkDummyCabal() {
  local CABAL
  local SELFDEP=$(mkConstraintString "$1")

  read -r -d '' CABAL<<EOF
name:               Dummy
version:            0.1.0.0
build-type:         Simple
cabal-version:      >=1.10

library
  build-depends:    $SELFDEP
  exposed-modules:
EOF

  echo "$CABAL"
}

# If the argument is a cabal file, copy the contents of the directory
# it is in to the current directory. Otherwise, try using ~cabal get~
# to download the package from hackage.
getCabalFile() {
  if [ -f "$1" ]; then
    cp -R "$(dirname "$1")"/* .
  else
    mkdir -p .cabbages
    cabal get "$1" -d .cabbages
    local VERSIONED_NAME=$(ls .cabbages)
    mkDummyCabal "$VERSIONED_NAME" > dummy.cabal
  fi
}

# A default Nix expression suitable for nix-shell or installation.
defaultShell() {
  local NIX
  IFS=$'\n' read -r -d '' NIX <<'EOF'
with import <nixpkgs> {};
callPackage ./default.nix {
   haskellBuildTools = [ ghc.ghc784
                         haskellPackages.cabalInstall_1_20_0_6
                         haskellPackages.happy ];
}
EOF
  echo "$NIX"
}

getNamedCabbage() {
  local NIX
  read -r -d '' NIX<<EOF
with import <nixpkgs> {};
with import ./shell.nix;
(lib.findFirst (pkg: (builtins.parseDrvName pkg.name).name == "haskell-$1")
               {name="Error";}
               cabbageDeps).outPath
EOF
  echo "$NIX" > getNamedCabbage.nix

  local CABBAGE
  CABBAGE=$(nix-instantiate --eval getNamedCabbage.nix | sed 's/^"\(.*\)"$/\1/')
  echo "To install $1 in your environment, run:"
  echo "nix-env -i $CABBAGE"
}

showHelp() {
  echo "Usage: cabbage [-a] [packageName]"
  echo ""
  echo "- Run cabbage in a directory with a .cabal file to build Nix"
  echo "  expressions for the current package and all of its dependencies."
  echo "  Then run 'nix-shell --run 'sh $setup'' to ensure that all "
  echo "  dependencies are available in the Nix store, and to link them into "
  echo "  the sandbox. "
  echo "  If no sandbox is in the current directory, a new one will be created."
  echo ""
  echo "- The '-a' option will additionally link the dependencies of all "
  echo "  build targets of the current .cabal file. Without this option, "
  echo "  dependencies of test and benchmark suites won't be installed or "
  echo "  linked into the sandbox"
  echo ""
  echo "- If cabbage is given a path to a .cabal file or a package name "
  echo "  (with optional version suffix) available on hackage, that package "
  echo "  will be built in a temporary directory so that it is available in "
  echo "  the Nix store for future builds. If you want executables provided "
  echo "  by that package to be linked into your environment, follow the "
  echo "  instructions in the last line of cabbage output."
}

ALLTARGETS=false

while getopts ":ah" opt; do
  case "$opt" in
    a) ALLTARGETS=true;;
    h|\?) showHelp; exit 0;;
  esac
done
shift $((OPTIND - 1))

if [ "$#" -eq 0 ]; then
  if ! [ -f cabal.sandbox.config ]; then
    cabal sandbox init
  fi
  if ! [ -f shell.nix ]; then
    defaultShell > shell.nix
  fi
  mkCabbages $ALLTARGETS
else
  mytmpdir=$(mktemp -d 2>/dev/null || mktemp -d -t 'cabbage-temp')
  (cd "$mytmpdir" \
      && getCabalFile "$1" \
      && cabal sandbox init \
      && mkCabbages $ALLTARGETS \
      && defaultShell > shell.nix \
      && cabal sandbox hc-pkg recache \
      && nix-shell --run "echo 'Done'" \
      && getNamedCabbage "$1")
  rm -r "$mytmpdir"
fi
